plugins {
    id 'antlr'
    id 'jacoco'
    id 'groovy'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "org.sonarqube" version "3.0"
    id 'org.jetbrains.dokka' version '1.4.20'
    id 'org.jetbrains.kotlin.jvm' version '1.4.20'
    id 'org.unbroken-dome.test-sets' version '3.0.1'
    id "com.github.ben-manes.versions" version "0.36.0"
}

group projectGroupId
version projectVersion

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

String getBuildProperty(String property) {
    project.findProperty (property) ?: System.getenv (property) ?: 'n/a'
}

ext {
    processorApiVersion = '2020.3'
    processorTestVersion = '2020.3-SNAPSHOT'
    jacksonVersion = '2.12.0'
    groovyVersion = '3.0.7'

    publishUser = getBuildProperty ('PUBLISH_USER')
    publishKey =  getBuildProperty ('PUBLISH_KEY')

    signKey = getBuildProperty ('SIGN_KEY')
    signPwd = getBuildProperty ('SIGN_PWD')

    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

repositories {
    mavenCentral()
    jcenter()

    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
        content {
           includeGroup "io.openapiprocessor"
        }
        mavenContent {
            snapshotsOnly()
        }
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

testSets {
    testInt
}

check.dependsOn testInt

sourceSets {
    main {
        java {
            srcDir 'build/antlr'
        }
    }
}

generateGrammarSource {
    arguments += ['-package', 'io.openapiprocessor.core.processor.mapping.v2.parser']
    outputDirectory = new File("$buildDir/antlr/io/openapiprocessor/core/processor/mapping/v2/parser".toString())
}

compileTestGroovy {
    dependsOn 'compileKotlin'
    classpath += files(compileKotlin.destinationDir)
    classpath += files(compileTestKotlin.destinationDir)
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileKotlin.dependsOn generateGrammarSource

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

dependencies {
    components.all(JacksonPlatformRule)
    components.all(KotlinPlatformRule)

    antlr 'org.antlr:antlr4:4.9'

    compileOnly "io.openapiprocessor:openapi-processor-api:$processorApiVersion"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"

    implementation 'org.openapi4j:openapi-parser:1.0.4'
    implementation ('io.swagger.parser.v3:swagger-parser:2.0.24') {
        exclude group: 'io.swagger.parser.v3', module: 'swagger-parser-v2-converter'
        exclude group: 'io.swagger.core.v3', module: 'swagger-annotations'
    }

    implementation ('com.google.guava:guava:30.1-jre') {
        exclude group: 'com.google.guava'
        exclude group: 'com.google.j2objc'
        exclude group: 'com.google.code.findbugs'
        exclude group: 'com.google.errorprone'
        exclude group: 'org.checkerframework'
        exclude group: 'org.codehaus.mojo'
    }

    implementation 'com.atlassian.commonmark:commonmark:0.16.1'
    implementation ('com.google.googlejavaformat:google-java-format:1.9') {
        exclude group: 'com.google.guava'
    }

    testImplementation "io.openapiprocessor:openapi-processor-api:$processorApiVersion"
    testImplementation ("io.openapiprocessor:openapi-processor-test:$processorTestVersion") {
        exclude group: 'com.google.guava'
    }

    testImplementation("com.google.jimfs:jimfs:1.1") {
         exclude group: 'com.google.guava'
     }

    testImplementation "org.codehaus.groovy:groovy:$groovyVersion"
    testImplementation "org.codehaus.groovy:groovy-nio:$groovyVersion"
    testImplementation ("org.junit.jupiter:junit-jupiter-api:5.7.0")
    testImplementation ("org.junit.jupiter:junit-jupiter-params:5.7.0")
    testRuntimeOnly ("org.junit.jupiter:junit-jupiter-engine:5.7.0")
    testImplementation ('org.spockframework:spock-core:2.0-M4-groovy-3.0') {}
    testImplementation("io.mockk:mockk:1.10.4")
    testImplementation("io.kotest:kotest-runner-junit5:4.3.2")
    testImplementation 'ch.qos.logback:logback-classic:1.2.3'
}

tasks.withType(Test) {
    finalizedBy jacocoTestReport
}


jacoco {
    toolVersion = "0.8.6"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
        csv.enabled false
    }

    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
}


task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set ('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: [dokkaHtml]) {
    archiveClassifier.set ('javadoc')
    from "$buildDir/docs"
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

dokkaHtml {
    outputDirectory = file("$buildDir/docs/kotlin".toString ())
}

sonarqube {
  properties {
    property "sonar.projectKey", "openapi-processor_openapi-processor-core"
    property "sonar.organization", "openapi-processor"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
  }
}

apply from: "${rootProject.rootDir}/gradle/publishing.gradle"
apply from: "${rootProject.rootDir}/gradle/publishing.tasks.gradle.kts"
