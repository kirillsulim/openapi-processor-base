plugins {
    id 'antlr'
    id 'jacoco'
    id 'groovy'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "org.sonarqube" version "3.3"
    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

group projectGroupId
version projectVersion

ext {
    processorApiVersion = '2021.1'
    processorTestVersion = '2022.2-SNAPSHOT'
    groovyVersion = '3.0.10'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
        mavenContent {
            snapshotsOnly()
        }
    }
}


testing {
    suites {
        test {
            useJUnitJupiter('5.8.2')
        }

        testInt(JvmTestSuite) {
            useJUnitJupiter('5.8.2')
            testType = TestSuiteType.INTEGRATION_TEST

            dependencies {
                implementation project
            }

            sources {
                java {
                    srcDirs = ['src/testInt/kotlin']
                }
            }

            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }
}

tasks.named('check') {
    dependsOn(testing.suites.testInt)
}

sourceSets {
    main {
        java {
            srcDirs 'build/antlr', "${buildDir}/version"
        }
    }
}

java {
    withJavadocJar ()
    withSourcesJar ()
}

tasks.named('generateGrammarSource') {
    arguments += ['-package', 'io.openapiprocessor.core.processor.mapping.v2.parser']
    outputDirectory = new File("$buildDir/antlr/io/openapiprocessor/core/processor/mapping/v2/parser".toString())
}

tasks.named('compileTestGroovy') {
    dependsOn 'compileKotlin'
    classpath += files(compileKotlin.destinationDir)
    classpath += files(compileTestKotlin.destinationDir)
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

tasks.named('compileKotlin') {
    dependsOn 'generateVersion', 'generateGrammarSource'

    kotlinOptions.jvmTarget = "1.8"
}

tasks.named('compileTestKotlin') {
    dependsOn 'generateVersion', 'generateTestGrammarSource'
}

tasks.named('sourcesJar') {
    dependsOn 'generateVersion', 'generateGrammarSource'
}

dependencies {
    antlr 'org.antlr:antlr4:4.10.1'

    compileOnly "io.openapiprocessor:openapi-processor-api:$processorApiVersion"
    implementation platform("org.jetbrains.kotlin:kotlin-bom:1.6.21")
    implementation platform("com.fasterxml.jackson:jackson-bom:2.13.3")

    implementation 'org.openapi4j:openapi-parser:1.0.7'
    implementation ('io.swagger.parser.v3:swagger-parser:2.0.28') {
        exclude group: 'io.swagger.parser.v3', module: 'swagger-parser-v2-converter'
        exclude group: 'io.swagger.core.v3', module: 'swagger-annotations'
    }

    implementation platform('io.openapiprocessor:openapi-parser-bom:2022.1-SNAPSHOT.1')
    implementation ('io.openapiprocessor:openapi-parser')
//    implementation ('io.openapiprocessor:openapi-parser-interfaces')
//    implementation ('io.openapiprocessor:openapi-parser-validator')
    implementation ('io.openapiprocessor:openapi-parser-jackson')
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation ('org.apache.commons:commons-text:1.9')
    implementation ('com.atlassian.commonmark:commonmark:0.17.0')
    implementation ('com.google.googlejavaformat:google-java-format:1.15.0')
    implementation ('com.google.guava:guava:31.1-jre')
    implementation ('com.networknt:json-schema-validator:1.0.69')

    testImplementation ("io.openapiprocessor:openapi-processor-test:$processorTestVersion")
    testImplementation "io.openapiprocessor:openapi-processor-api:$processorApiVersion"
    testImplementation platform("org.codehaus.groovy:groovy-bom:3.0.10")
    testImplementation ("org.codehaus.groovy:groovy")
    testImplementation ("org.codehaus.groovy:groovy-nio")
    testImplementation ('org.spockframework:spock-core:2.1-groovy-3.0')
    testImplementation(platform("io.kotest:kotest-bom:5.3.0"))
    testImplementation("io.kotest:kotest-runner-junit5")
    testImplementation("io.kotest:kotest-framework-datatest")
    testImplementation("io.mockk:mockk:1.12.4")
    testImplementation ("ch.qos.logback:logback-classic:1.3.0-alpha14")
    testImplementation("com.google.jimfs:jimfs:1.2")
    testImplementation('com.google.guava:guava:31.1-jre')

    testIntImplementation ("io.openapiprocessor:openapi-processor-test:$processorTestVersion")
    testIntImplementation "io.openapiprocessor:openapi-processor-api:$processorApiVersion"
    testIntImplementation platform("org.codehaus.groovy:groovy-bom:3.0.10")
    testIntImplementation ("org.codehaus.groovy:groovy")
    testIntImplementation ("org.codehaus.groovy:groovy-nio")
    testIntImplementation(platform("io.kotest:kotest-bom:5.3.0"))
    testIntImplementation("io.kotest:kotest-runner-junit5")
    testIntImplementation("io.kotest:kotest-framework-datatest")
    testIntImplementation("io.mockk:mockk:1.12.4")
    testIntImplementation ("ch.qos.logback:logback-classic:1.3.0-alpha14")
    testIntImplementation("com.google.jimfs:jimfs:1.2")
    testIntImplementation('com.google.guava:guava:31.1-jre')
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        String v = it.candidate.version
        println "candidate ${it.candidate}:$v"
        return v.endsWith ("-M1") || v.contains ("alpha")
    }
}

tasks.withType(Test) {
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
        csv.enabled false
    }

    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
}

sonarqube {
  properties {
    property "sonar.projectKey", "openapi-processor_openapi-processor-core"
    property "sonar.organization", "openapi-processor"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
  }
}

apply plugin: VersionPlugin
apply from: "${rootProject.rootDir}/gradle/publishing.gradle"
apply from: "${rootProject.rootDir}/gradle/publishing.tasks.gradle.kts"
