plugins {
    id("openapiprocessor.library")
    id("openapiprocessor.test")
    id("openapiprocessor.testInt")
    id("openapiprocessor.version")

    id 'antlr'
    id 'groovy'
    id 'maven-publish'
    id 'signing'
    id "org.sonarqube" version "3.3"
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

group projectGroupId
version projectVersion

ext {
    groovyVersion = '3.0.10'
}

repositories {
//    mavenLocal()
}

sourceSets {
    main {
        java {
            srcDirs 'build/antlr'
        }
    }
}

java {
    withJavadocJar ()
    withSourcesJar ()
}

tasks.named('generateGrammarSource') {
    arguments += ['-package', 'io.openapiprocessor.core.processor.mapping.v2.parser']
    outputDirectory = new File("$buildDir/antlr/io/openapiprocessor/core/processor/mapping/v2/parser".toString())
}

tasks.named('compileTestGroovy') {
    dependsOn 'compileKotlin'
    classpath += files(compileKotlin.destinationDir)
    classpath += files(compileTestKotlin.destinationDir)
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

tasks.named('compileKotlin') {
    dependsOn 'generateGrammarSource'

    kotlinOptions.jvmTarget = "1.8"
}

tasks.named('compileTestKotlin') {
    dependsOn 'generateTestGrammarSource'
}

tasks.named('sourcesJar') {
    dependsOn 'generateGrammarSource'
}

dependencies {
    antlr 'org.antlr:antlr4:4.10.1'

    compileOnly libs.openapi.processor.api
    implementation platform("org.jetbrains.kotlin:kotlin-bom:1.6.21")
    implementation platform("com.fasterxml.jackson:jackson-bom:2.13.3")

    implementation 'org.openapi4j:openapi-parser:1.0.7'
    implementation ('io.swagger.parser.v3:swagger-parser:2.0.28') {
        exclude group: 'io.swagger.parser.v3', module: 'swagger-parser-v2-converter'
        exclude group: 'io.swagger.core.v3', module: 'swagger-annotations'
    }

    implementation (platform(libs.openapi.parser.bom))
    implementation (libs.openapi.parser.parser)
    implementation (libs.openapi.parser.jackson)
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation ('org.apache.commons:commons-text:1.9')
    implementation ('com.atlassian.commonmark:commonmark:0.17.0')
    implementation ('com.google.googlejavaformat:google-java-format:1.15.0')
    implementation ('com.google.guava:guava:31.1-jre')
    implementation ('com.networknt:json-schema-validator:1.0.69')

    testImplementation (libs.openapi.processor.api)
    testImplementation (libs.openapi.processor.test)
    testImplementation (platform(libs.kotest.bom))
    testImplementation (libs.kotest.runner)
    testImplementation (libs.kotest.datatest)
    testImplementation (libs.mockk)
    testImplementation (libs.spock)
    testImplementation (libs.logback)
    testImplementation (libs.jimfs)
    testImplementation (libs.guava)

    testIntImplementation (libs.openapi.processor.api)
    testIntImplementation (libs.openapi.processor.test)
    testIntImplementation (platform(libs.kotest.bom))
    testIntImplementation (libs.kotest.runner)
    testIntImplementation (libs.kotest.datatest)
    testIntImplementation (libs.mockk)
    testIntImplementation (libs.spock)
    testIntImplementation (libs.logback)
    testIntImplementation (libs.jimfs)
    testIntImplementation (libs.guava)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        String v = it.candidate.version
        println "candidate ${it.candidate}:$v"
        return v.endsWith ("-M1") || v.contains ("alpha")
    }
}

jacocoTestReport {
    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
}

sonarqube {
  properties {
    property "sonar.projectKey", "openapi-processor_openapi-processor-core"
    property "sonar.organization", "openapi-processor"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
  }
}

generateVersion {
    targetPackage = "io.openapiprocessor.core"
}

apply from: "${rootProject.rootDir}/gradle/publishing.gradle"
apply from: "${rootProject.rootDir}/gradle/publishing.tasks.gradle.kts"
