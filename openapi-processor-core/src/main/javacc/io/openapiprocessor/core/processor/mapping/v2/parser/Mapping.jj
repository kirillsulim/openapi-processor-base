/*
 * Copyright 2022 https://github.com/openapi-processor/openapi-processor-core
 * PDX-License-Identifier: Apache-2.0
 */

options {
  STATIC = false;
}

PARSER_BEGIN(MappingParser)
package io.openapiprocessor.core.processor.mapping.v2.parser;

import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;
import java.util.*;

/**
 * mapping parser
 */
public class MappingParser implements Mapping {
    private Mapping.Kind kind;
    private String sourceType;
    private String sourceFormat;
    private String annotationType;
    private Map<String, String> annotationParameters = new LinkedHashMap<String, String> ();
    private String targetType;
    private List<String> targetGenericTypes = new ArrayList<String> ();

    public MappingParser(String input) {
        this(new ByteArrayInputStream(input.getBytes(StandardCharsets.UTF_8)));
    }

    public Mapping.Kind getKind() {
        return kind;
    }

    public String getSourceType() {
        return sourceType;
    }

    public String getSourceFormat() {
        return sourceFormat;
    }

    public String getTargetType() {
        return targetType;
    }

    public List<String> getTargetGenericTypes() {
        return targetGenericTypes;
    }

    public String getAnnotationType() {
        return annotationType;
    }

    public Map<String, String> getAnnotationParameters() {
        return annotationParameters;
    }

    private String wrap(String source) {
        return "\"" + source + "\"";
    }
}

PARSER_END(MappingParser)

SKIP: {
      " "
    | "\t"
}

TOKEN: {
      < IDENTIFIER: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
    | < NUMBER: ["0"-"9"] (["0"-"9"])* >
    | < QUALIFIED_TYPE: (<IDENTIFIER> | "{package-name}") ("." <IDENTIFIER>)* >
    | < QUOTE_OPEN: "\""> : STRING
    | < PARENTHESIS_OPEN: "(">
    | < PARENTHESIS_CLOSE: ")">
}

<STRING> TOKEN: {
      < QUOTE_CLOSE: <QUOTE_OPEN> >: DEFAULT
    | < CHAR: ~["\""]>
}


// root
Mapping mapping(): {
} {
      LOOKAHEAD(2) map() { return this; }
    | LOOKAHEAD(2) annotate() { return this; }
}

// type mapping
void map(): {
} {
    sourceType() "=>" targetType() <EOF> { kind = Mapping.Kind.MAP; }
}

// type annotation
void annotate(): {
} {
    sourceType() "@" annotationType() <EOF> { kind = Mapping.Kind.ANNOTATE; }
}

void sourceType(): {
} {
    <IDENTIFIER> { sourceType = token.image; } (":" <IDENTIFIER> )? { sourceFormat = token.image; }
}

void targetType(): {
} {
    LOOKAHEAD(2) annotationType() qualifiedType()
  | LOOKAHEAD(2) qualifiedType()
}

void qualifiedType(): {
} {
    <QUALIFIED_TYPE> { targetType = token.image; }
    ("<" genericParameters() ">")?
}

void annotationType(): {
} {
    <QUALIFIED_TYPE> { annotationType = token.image; }
    ("(" annotationParameters() ")")?
}

void annotationParameters(): {
} {
    LOOKAHEAD(2) annotationParameterNamed() ("," annotationParameterNamed())? | annotationParameterUnnamed()
}

void annotationParameterUnnamed(): {
    StringBuilder s = new StringBuilder();
} {
    <IDENTIFIER>
    { annotationParameters.put ("", token.image); }
  | <NUMBER>
    { annotationParameters.put ("", token.image); }
  | <QUOTE_OPEN>
    (<CHAR> { s.append (token.image); })* { annotationParameters.put ("", wrap(s.toString ())); }
    <QUOTE_CLOSE>
}

void annotationParameterNamed(): {
    Token name;
    Token value;
    StringBuilder s = new StringBuilder();
} {
    name = <IDENTIFIER> "="
    (
        value = <IDENTIFIER>
        { annotationParameters.put (name.image, value.image); }
      | value = <NUMBER>
        { annotationParameters.put (name.image, value.image); }
      | <QUOTE_OPEN>
        (<CHAR> { s.append (token.image); })* { annotationParameters.put (name.image, wrap(s.toString ())); }
        <QUOTE_CLOSE>
   )
}

void genericParameters(): {
} {
    <QUALIFIED_TYPE> { targetGenericTypes.add (token.image); }
    (
        "," <QUALIFIED_TYPE> { targetGenericTypes.add (token.image); }
    )?
}
